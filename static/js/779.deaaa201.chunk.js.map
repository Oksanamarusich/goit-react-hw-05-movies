{"version":3,"file":"static/js/779.deaaa201.chunk.js","mappings":"sLAEaA,E,QAAeC,GAAAA,EAAH,uCACd,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,G,gFCDCC,E,QAAkBL,GAAAA,IAAH,wG,SCCfM,EAAS,WAClB,OAAO,SAACD,EAAD,WACH,SAAC,KAAD,CACGE,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAGnB,C,wLCXYC,EAAUZ,EAAAA,GAAAA,EAAH,iHAIX,SAAAa,GAAK,OAAIA,EAAMX,MAAMC,OAAOW,MAAvB,IAKDC,EAAOf,EAAAA,GAAAA,GAAH,uD,SCHF,SAASgB,IAEpB,IAAMC,GAASC,EAAAA,EAAAA,MACf,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOf,EAAP,KAAcoB,EAAd,KA4BA,OA1BCC,EAAAA,EAAAA,YAAU,WAAM,wCAKb,2FACIF,GAAW,GACVC,GAAS,GAFd,mBAI8BE,EAAAA,EAAAA,IAAaT,EAAOU,QAASV,EAAOG,SAJlE,OAIcA,EAJd,OAKQC,EAAWD,GALnB,gDASSI,GAAS,GATlB,yBAaSD,GAAW,GAbpB,6EALa,sBACRN,EAAOU,SADC,mCAqBZC,EACJ,GAAE,CAACX,EAAOU,QAASV,EAAOG,WAKvB,2BACKE,IAAW,SAAChB,EAAA,EAAD,IACdF,IACA,SAACL,EAAA,EAAD,UAAc,4CAEQ,IAAnBqB,EAAQS,QACT,SAACd,EAAD,UACGK,EAAQU,KAAI,SAAAC,GAAI,OACX,2BACI,wBAAKA,EAAKC,UACZ,uBAAID,EAAKE,YAFFF,EAAKG,GADH,OASjB,SAACtB,EAAD,UAAS,gDAItB,C,kMC3DDuB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEFC,EAAa,mCAAG,sGACLF,EAAAA,EAAAA,IAAU,qBAAsB,CACrDlB,OAAQ,CACNqB,QAASF,EACTG,SAAU,WAJc,uBACpBC,EADoB,EACpBA,KADoB,kBASrBA,EAAKC,SATgB,2CAAH,qDAedC,EAAS,mCAAG,WAAOC,GAAP,yFACAR,EAAAA,EAAAA,IAAU,eAAgB,CAC/ClB,OAAQ,CACNqB,QAASF,EACTG,SAAU,QACVK,MAAM,GAAD,OAAID,MALU,uBACfH,EADe,EACfA,KAORK,QAAQC,IAAI,QAASN,EAAKC,SARH,kBAShBD,EAAKC,SATW,2CAAH,sDAgBPM,EAAU,mCAAG,WAAOpB,GAAP,yFACHQ,EAAAA,EAAAA,IAAA,gBAAmBR,GAAW,CACnDV,OAAQ,CACNqB,QAASF,EACTG,SAAU,WAJY,uBAClBC,EADkB,EAClBA,KADkB,kBASnBA,GATmB,2CAAH,sDAeZQ,EAAS,mCAAG,WAAOrB,GAAP,yFACAQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,YAAsC,CAC3DV,OAAQ,CACNqB,QAASF,EACTG,SAAU,WAJS,uBACfC,EADe,EACfA,KAORK,QAAQC,IAAI,YAAaN,EAAKS,MARP,kBAShBT,EAAKS,MATW,2CAAH,sDAeTvB,EAAY,mCAAG,WAAOC,GAAP,yFACHQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,YAAsC,CAC3DV,OAAQ,CACNqB,QAASF,EACTG,SAAU,WAJY,uBAClBC,EADkB,EAClBA,KAORK,QAAQC,IAAI,eAAgBN,EAAKC,SARP,kBASnBD,EAAKC,SATc,2CAAH,qD","sources":["components/ErrorMessage.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorMessage = styled.b`\n  color: ${p => p.theme.colors.error};\n`;","import styled from 'styled-components';\n\nexport const ContainerLoader = styled.div`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nheight: 100vh;\n`;\n\n","import { RotatingLines } from 'react-loader-spinner';\nimport {ContainerLoader} from 'components/Loader/Loader.styled'\n\nexport const Loader = () => {\n    return <ContainerLoader>\n        <RotatingLines\n           strokeColor=\"grey\"\n           strokeWidth=\"5\"\n           animationDuration=\"0.75\"\n           width=\"96\"\n           visible={true}\n          />\n    </ContainerLoader>\n}","import styled from 'styled-components';\n\nexport const Message = styled.p`\nfont-weight: 700;\n\nfont-size: 20px;\ncolor: ${props => props.theme.colors.orange};\npadding: 0 0 40px 40px;\nmargin: 0;\n`;\n\nexport const List = styled.ul`\npadding: 10px 40px 80px 40px;\n`","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport { ErrorMessage } from 'components/ErrorMessage';\nimport { fetchReviews } from 'services/api';\nimport{Message, List} from './Reviews.styled'\n\n\nexport default function Reviews() {\n\n    const params = useParams();\n    const [reviews, setReviews] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n     useEffect(() => {\n        if (!params.movieId) {\n            return;\n        };\n\n        async function getReviews() {\n            setLoading(true);\n             setError(false);\n            try {\n                const reviews = await fetchReviews(params.movieId, params.reviews);\n                setReviews(reviews);\n           \n            } catch (error) {\n        \n                 setError(true);\n                \n            } finally {\n        \n                 setLoading(false);\n      }\n        };\n         getReviews();\n    }, [params.movieId, params.reviews]);\n\n\n\n    return (\n        <div>\n            {loading && <Loader />}\n         {error && (\n          <ErrorMessage>Whoops! Error! Please reload this page!</ErrorMessage>)} \n           \n            {reviews.length !== 0 ? \n            <List>\n              {reviews.map(elem => (\n                    <li key={elem.id}>\n                        <h3>{elem.author}</h3>\n                      <p>{elem.content }</p>\n\n                    </li>\n                ))}\n                \n            </List>\n            : <Message>We don't have any reviews for this movie.</Message>}\n            \n        \n        </div >)\n}","import axios from 'axios';\n\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a374ad49295f660bd4b75eba44704cf2';\n\nexport const  fetchTrending = async () => {\n  const  {data}  = await axios.get('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US'\n      \n    },\n  });\n  \n  return data.results;\n  \n};\n \n// пошук за ключовим словом\n\nexport const fetchWord = async (value)=> {\n  const { data } = await axios.get('search/movie', {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query:`${value}`\n    }\n  });\n  console.log('VALUE', data.results)\n  return data.results;\n\n}\n\n\n//information about film\n\n  export const fetchMovie = async (movieId)=> {\n  const { data } = await axios.get(`movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US'\n     \n    }\n  });\n  \n  return data;\n\n}\n\n  // cast\n\nexport const fetchCast = async (movieId)=> {\n  const { data } = await axios.get(`movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US'\n     \n    }\n  });\n  console.log('fetchCast', data.cast);\n  return data.cast;\n\n}\n\n  // Reviews\n\nexport const fetchReviews = async (movieId)=> {\n  const { data } = await axios.get(`movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US'\n     \n    }\n  });\n  console.log('fetchReviews', data.results);\n  return data.results;\n\n}"],"names":["ErrorMessage","styled","p","theme","colors","error","ContainerLoader","Loader","strokeColor","strokeWidth","animationDuration","width","visible","Message","props","orange","List","Reviews","params","useParams","useState","reviews","setReviews","loading","setLoading","setError","useEffect","fetchReviews","movieId","getReviews","length","map","elem","author","content","id","axios","API_KEY","fetchTrending","api_key","language","data","results","fetchWord","value","query","console","log","fetchMovie","fetchCast","cast"],"sourceRoot":""}